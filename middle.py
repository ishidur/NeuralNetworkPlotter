import numpy as np
import matplotlib.pyplot as plt, numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.gridspec as gridspec
from pylab import *


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


# Components of network(l=0,1,2,,,)
# # no pretraining
# neurons = np.array([2, 3, 3, 1])
# pattern a
# str = "99,0.0418225, 0.0528989, 0.0355166, 0.0219894, 0.0284989, 0.0252839, 0.0431603, 0.0517194, 0.048593, 0.250841, 0.243894, 0.250607, 0.249124, 0.250395, 0.262579, 0.242443, 0.255466, 0.255315, 0.488694, 0.485167, 0.496667, 0.00695122, 0.000889609, 0.00996974, 0.0100056, 0.500064"
# str = "78299,4.91073, 4.95731, 4.91176, 5.10117, 5.14732, 5.10262, -2.10868, -2.13352, -2.10941, 4.09315, 3.04106, 5.1107, 4.15034, 3.09029, 5.20075, 4.0855, 3.05302, 5.11641, -1.70357, -0.313366, -3.62648, 2.26813, -0.270119, 6.13657, -7.20804, 0.337053"
# str = "156699,4.09346, 4.09912, 4.04566, 4.09805, 4.09806, 4.04185, -4.62664, -4.75853, -4.78934, 4.73362, 3.16292, 6.17706, 4.77405, 3.33048, 6.23426, 4.696, 3.39438, 6.12645, -1.5752, -6.35835, -2.56061, 3.98422, -11.0958, 8.29517, -6.43521, 0.000100385"

# pattern b
# str = "99,0.0487588, 0.0412678, 0.0418812, 0.0279557, 0.0149761, 0.0306943, 0.0374296, 0.0450612, 0.05093, 0.24836, 0.258547, 0.249324, 0.241466, 0.250659, 0.24693, 0.259729, 0.247944, 0.257735, 0.48841, 0.491786, 0.487627, 0.0121013, 0.00238304, 0.00864432, 0.0062405, 0.500064"
# str = "16799,3.50044, 3.46319, 3.56912, 3.49168, 3.45262, 3.58619, -4.15643, -4.11788, -3.87371, 4.81092, 3.13416, 4.31885, 4.72689, 3.10106, 4.24773, 4.92017, 2.70629, 4.41055, -2.08022, -5.78664, -1.72496, 5.90131, -9.32503, 4.6414, -5.53457, 0.000873485"
# str = "33599,3.63493, 3.59896, 3.76591, 3.62688, 3.58919, 3.78296, -4.27263, -4.24001, -3.8294, 5.05863, 3.61037, 4.56084, 4.9736, 3.57572, 4.48872, 5.24619, 2.95052, 4.7293, -2.53871, -6.74342, -2.20384, 6.81438, -11.4556, 5.45363, -6.22166, 0.000100438"

# pattern c
# str = "99,0.0356121, 0.051164, 0.0418031, 0.0277181, 0.0218878, 0.0303478, 0.0351952, 0.0574055, 0.0461984, 0.23878, 0.255879, 0.242103, 0.252142, 0.255324, 0.258747, 0.243846, 0.254375, 0.24281, 0.483167, 0.498364, 0.488029, 0.0141638, 0.00498508, 0.00562855, 0.005096, 0.500064"
# str = "23399,4.19115, 4.24312, 4.21037, 4.34945, 4.39985, 4.36852, -1.91947, -1.94577, -1.92951, 4.78006, 2.09839, 2.8389, 4.87553, 2.13036, 2.89854, 4.81737, 2.11036, 2.85702, -3.7589, -0.0622116, -0.146928, 6.77175, -0.735309, 0.69857, -5.81139, 0.336957"
# str = "46799,3.66495, 3.72408, 3.68454, 3.66289, 3.72622, 3.68435, -4.24691, -4.1874, -4.2315, 6.10763, 3.41661, 3.17914, 6.24846, 3.31401, 3.25275, 6.15871, 3.38789, 3.20152, -3.09223, -6.6914, -0.905804, 9.93949, -11.3495, 2.07432, -6.09337, 0.000100367"

# neurons = np.array([2, 3, 3, 3, 1])
# pattern a
# str = "99,-0.00883684, -0.00564811, -0.00175109, 0.00613877, -0.00836542, 0.00206478, -0.00811894, -0.00559369, -0.00638766, 0.0261845, 0.0278601, 0.019858, 0.0223634, 0.0227176, 0.0286221, 0.0254571, 0.0276779, 0.0238408, 0.0409139, 0.0571508, 0.0516821, 0.246942, 0.25717, 0.251687, 0.260969, 0.252858, 0.255423, 0.244323, 0.249607, 0.241642, 0.48818, 0.487968, 0.490686, 0.00871922, 0.00609749, 0.00635475, 0.00771574, 0.500064"
# str = "499999,0.347588, 0.350538, 0.356031, 0.20174, 0.187415, 0.198505, 0.392822, 0.395122, 0.396156, 0.825546, 0.825509, 0.815885, 0.821048, 0.81969, 0.823974, 0.827442, 0.827944, 0.82248, 1.45353, 1.46756, 1.45774, 2.63902, 2.64771, 2.64399, 2.66332, 2.65366, 2.658, 2.6374, 2.64114, 2.63494, 3.58811, 3.58561, 3.59087, 0.0296933, 0.0277877, 0.0279271, -0.0350949, 0.500316"
# str = "999999,0.371308, 0.374246, 0.379756, 0.214939, 0.200654, 0.211727, 0.419828, 0.422128, 0.423182, 0.860894, 0.860623, 0.851283, 0.856372, 0.854782, 0.85935, 0.862888, 0.863157, 0.857977, 1.50435, 1.51805, 1.50864, 2.80397, 2.81265, 2.80895, 2.82836, 2.81869, 2.82304, 2.80233, 2.80606, 2.79988, 3.75952, 3.75702, 3.76229, 0.0329909, 0.0310887, 0.0312188, -0.0449848, 0.500316"

# pattern b
# str = "99,-0.00569401, 0.00278809, 0.00123811, 0.00406079, 0.0033548, -0.00783942, 0.00126392, -0.00849882, 0.00987644, 0.0218362, 0.0238833, 0.0193789, 0.0319282, 0.026835, 0.0196832, 0.0272152, 0.0272257, 0.0130354, 0.0513636, 0.0399782, 0.0351452, 0.247492, 0.247114, 0.249799, 0.255238, 0.248641, 0.249429, 0.241908, 0.237245, 0.249503, 0.49821, 0.48986, 0.489482, 0.007397, 0.00880495, 0.00428336, 0.00815897, 0.500064"
# str = "499999,0.348538, 0.360755, 0.356824, 0.198548, 0.199926, 0.187647, 0.399897, 0.394391, 0.410137, 0.819785, 0.824715, 0.821323, 0.830547, 0.828338, 0.822307, 0.828759, 0.831665, 0.818591, 1.45667, 1.45051, 1.44627, 2.64853, 2.65254, 2.65191, 2.65206, 2.64983, 2.64731, 2.62636, 2.62603, 2.635, 3.60017, 3.59873, 3.59342, 0.028812, 0.0298849, 0.0266109, -0.0349944, 0.500316"
# str = "999999,0.372136, 0.384427, 0.380415, 0.211704, 0.213133, 0.200841, 0.426779, 0.421371, 0.437031, 0.85492, 0.859902, 0.856874, 0.865745, 0.863589, 0.857922, 0.864022, 0.866982, 0.854272, 1.50709, 1.501, 1.49728, 2.81357, 2.81758, 2.81693, 2.81708, 2.81486, 2.81232, 2.79126, 2.79093, 2.79989, 3.7716, 3.77015, 3.76484, 0.0321215, 0.0331976, 0.0299309, -0.0449364, 0.500316"

# pattern c
# str = "99,-0.00853094, 0.00767091, -0.00346067, 0.00147331, -0.00204842, -0.00409316, -0.00903675, 0.00268073, -0.00173475, 0.0131012, 0.0307091, 0.0272538, 0.013637, 0.0325835, 0.025227, 0.0219487, 0.021698, 0.0289812, 0.0533528, 0.0491533, 0.0477027, 0.24036, 0.25106, 0.255681, 0.256165, 0.252561, 0.25434, 0.249333, 0.251944, 0.247544, 0.481841, 0.487918, 0.489627, 0.00137679, 0.00902413, 0.00336646, 0.0129149, 0.500064"
# str = "499999,0.345993, 0.364132, 0.352237, 0.195509, 0.193128, 0.19069, 0.390129, 0.404231, 0.398827, 0.809843, 0.8258, 0.821638, 0.819487, 0.836768, 0.828694, 0.822258, 0.820349, 0.826923, 1.46393, 1.45781, 1.45448, 2.63412, 2.64132, 2.64517, 2.65917, 2.65204, 2.65305, 2.64854, 2.64764, 2.64247, 3.58579, 3.58629, 3.58681, 0.024205, 0.0297824, 0.0256126, -0.0292867, 0.500316"
# str = "999999,0.369606, 0.387712, 0.375847, 0.208594, 0.20622, 0.203794, 0.417089, 0.431183, 0.425797, 0.845171, 0.860822, 0.856781, 0.855124, 0.872097, 0.864144, 0.857713, 0.855498, 0.862192, 1.51486, 1.5083, 1.50514, 2.79907, 2.80626, 2.81012, 2.82421, 2.81708, 2.81809, 2.81354, 2.81263, 2.80747, 3.75723, 3.75772, 3.75825, 0.0274674, 0.0330474, 0.028874, -0.0390753, 0.500316"

# # pretrained
neurons = np.array([2, 3, 3, 3, 1])
# pattern a
str = "9,-0.562377, -0.275068, 6.08234, 4.46247, 4.61822, 0.283341, -1.96811, -2.19457, -3.17061, 2.26009, 1.31546, 2.51885, 2.41162, 1.15844, 2.64848, 1.26812, -5.03426, 0.406915, -2.35325, 1.09903, -2.36015, 0.256109, 2.36763, 1.99073, 4.24761, -2.63358, 0.657033, 1.2347, 2.28027, 2.57662, -2.88671, -1.32138, -2.70352, 0.117933, 0.0294466, 0.0970494, -0.0267851, 0.500658"
# str = "329,-0.319502, 0.0274296, 6.39703, 4.74823, 4.90266, 0.172146, -2.43108, -2.5516, -3.19396, 2.52511, 1.51624, 3.05685, 2.72571, 1.3444, 3.21416, 2.7637, -5.96505, 0.56794, -2.57272, 0.405657, -3.29025, 0.704366, 5.21733, 1.79836, 5.42954, -4.16319, 0.923433, 1.63258, 3.82768, 4.40824, -5.46438, -0.447941, -3.45797, 5.10995, 5.44071, -4.89507, -2.87478, 0.0339368"
# str = "669,-0.31917, 0.0191196, 6.46899, 4.86404, 5.01275, 0.14975, -2.47524, -2.60111, -3.21754, 2.61476, 1.60518, 3.27875, 2.82365, 1.42764, 3.4385, 3.01327, -6.18675, 0.394933, -2.67678, 0.364373, -3.48671, 0.869728, 5.74982, 1.63658, 5.95074, -4.5844, 1.12585, 1.8501, 4.01007, 5.1224, -6.07234, -0.539598, -3.61413, 6.45757, 6.63812, -6.28293, -3.35945, 0.00979064"

# pattern b

# pattern c

b = [float(k) for k in str.split(',')]
# print(b)
weights = []
biases = []
iter = 1
for i in range(len(neurons) - 1):
    m = []
    for j in range(neurons[i]):
        m.append(b[iter:iter + neurons[i + 1]])
        iter += neurons[i + 1]
    biases.append(np.matrix(b[iter:iter + neurons[i + 1]]).transpose())
    iter += neurons[i + 1]
    weights.append(np.matrix(m).transpose())

def calcOutput(t):
    inputs = weights[0] * np.matrix(t).transpose() + biases[0]
    for i in range(len(neurons) - 3):
        outputs = sigmoid(inputs)
        inputs = weights[i + 1] * outputs + biases[i + 1]
    outputs = sigmoid(inputs)
    return np.array(outputs.T)[0]

testData = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
v = np.array(list(map(calcOutput, testData)))
print(v)
t1 = np.array([1, 0, 0, 1])
fig = plt.figure()

ax1 = fig.add_subplot(111, projection='3d')
ax1.scatter(v[:, 0], v[:, 1], v[:, 2], c=t1, s=500, marker='o')
plt.show()
