import numpy as np
from matplotlib import cm, gridspec, pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


# Components of network(l=0,1,2,,,)
# neuronStr = "2X2X1"
# str = "2069,6.36879, 4.58608, 6.92113, 4.34442, -2.47962, -6.79904, 6.35838, -6.4943, -3.0653, 0.00999636"

# neuronStr = "2X3X1"
# str = "599,5.86581, -1.6873, 4.31575, 5.14747, 5.76717, 4.32641, -2.35129, -2.66479, -6.65975, 6.44388, 0.275338, -7.0809, -3.04433, 0.00990169"

# neuronStr = "2X4X1"
# str = "489,3.43153, 5.37924, 3.09733, -4.81061, 3.89932, -2.03991, 4.08778, 5.30856, -1.60353, -3.65043, -5.78128, -3.45817, 2.4249, 4.37504, -5.60206, 5.23461, -2.94186, 0.00974184"
# str = "559,4.02681, 5.58551, -0.7994, 4.56916, 5.15392, 2.66137, 4.70171, 4.55158, -1.90552, -1.70361, -2.20378, -7.02321, 4.52788, 2.66148, 0.48565, -7.59381, -3.45308, 0.00998716"

# neuronStr = "2X2X2X1"
# str = "1109,4.44087, 3.74287, 3.62482, 6.55838, -5.97092, -2.22584, 0.882932, 6.7804, 6.93495, 2.71067, -3.1506, -6.41817, 6.04266, -6.42694, -2.83843, 0.00994148"

# neuronStr = "2X3X3X1"
# str = "659,2.94228, 6.20703, -2.15972, 3.93808, 0.541414, 5.70829, -4.48722, -3.09875, -2.88049, 0.410709, 2.58557, 5.1793, -3.65896, 5.98425, 2.29711, 5.80167, 0.759044, 2.06787, -3.63505, -2.65884, -6.25454, 5.50012, 5.79299, -6.6336, -2.97932, 0.00997591"

# neuronStr = "2X4X4X1"
# str = "419,-1.74429, -0.864807, 2.92453, 6.19674, 4.60773, 4.9703, 2.47731, -0.3114, -1.48083, -1.94901, -1.82405, -2.70423, 1.29178, 1.90646, 3.67907, 3.17465, 1.96039, 2.25654, 3.70381, 2.85224, 3.2566, 1.70034, -0.0547112, -0.998359, 4.10569, 1.0241, -2.77683, -5.12003, -2.3828, -2.10662, 0.017373, -2.54969, 3.65127, -0.0783893, -5.69896, 6.04371, -0.56462, 0.00975528"

neuronStr = "2X3X3X3X1"
# str = "9	-0.562377	-0.275068	6.08234	4.46247	4.61822	0.283341	-1.96811	-2.19457	-3.17061	2.26009	1.31546	2.51885	2.41162	1.15844	2.64848	1.26812	-5.03426	0.406915	-2.35325	1.09903	-2.36015	0.256109	2.36763	1.99073	4.24761	-2.63358	0.657033	1.2347	2.28027	2.57662	-2.88671	-1.32138	-2.70352	0.117933	0.0294466	0.0970494	-0.0267851	0.500658"
# str = "299	-0.320427	0.0282697	6.38451	4.72777	4.88356	0.176964	-2.42053	-2.53983	-3.18933	2.51173	1.49899	3.01847	2.71075	1.32816	3.1752	2.71905	-5.92568	1.00301	-2.5492	0.415383	-3.2471	0.672197	5.11823	1.81751	5.33949	-4.08356	0.902672	1.59327	3.79292	4.28044	-5.35753	-0.438019	-3.42107	4.88397	5.2329	-4.64963	-2.79325	0.0413463"
# str = "669	-0.31917	0.0191196	6.46899	4.86404	5.01275	0.14975	-2.47524	-2.60111	-3.21754	2.61476	1.60518	3.27875	2.82365	1.42764	3.4385	3.01327	-6.18675	1.00301	-2.67678	0.364373	-3.48671	0.869728	5.74982	1.63658	5.95074	-4.5844	1.12585	1.8501	4.01007	5.1224	-6.07234	-0.539598	-3.61413	6.45757	6.63812	-6.28293	-3.35945	0.00979064"

# no pretrain
str = "99	-0.00883684	-0.00564811	-0.00175109	0.00613877	-0.00836542	0.00206478	-0.00811894	-0.00559369	-0.00638766	0.0261845	0.0278601	0.019858	0.0223634	0.0227176	0.0286221	0.0254571	0.0276779	0.0238408	0.0409139	0.0571508	0.0516821	0.246942	0.25717	0.251687	0.260969	0.252858	0.255423	0.244323	0.249607	0.241642	0.48818	0.487968	0.490686	0.00871922	0.00609749	0.00635475	0.00771574	0.500064"
# str = "500099	0.347595	0.350545	0.356038	0.201744	0.187419	0.198509	0.39283	0.39513	0.396164	0.825557	0.825519	0.815895	0.821059	0.819701	0.823985	0.827453	0.827955	0.82249	1.45355	1.46758	1.45776	2.63907	2.64775	2.64403	2.66337	2.65371	2.65805	2.63745	2.64119	2.63499	3.58816	3.58566	3.59092	0.0296942	0.0277886	0.027928	-0.0350976	0.500316"
# str = "999999	0.371308	0.374246	0.379756	0.214939	0.200654	0.211727	0.419828	0.422128	0.423182	0.860894	0.860623	0.851283	0.856372	0.854782	0.85935	0.862888	0.863157	0.857977	1.50435	1.51805	1.50864	2.80397	2.81265	2.80895	2.82836	2.81869	2.82304	2.80233	2.80606	2.79988	3.75952	3.75702	3.76229	0.0329909	0.0310887	0.0312188	-0.0449848	0.500316"

# neuronStr = "2X4X4X4X1"
# str = "409,-0.697841, -0.897475, 5.89155, 2.80258, 4.32837, 4.94154, -0.0758867, 1.80829, -1.87105, -2.07275, -2.86402, -2.39909, 2.84368, -0.299338, 2.03284, 2.06372, 3.15449, -0.234366, 2.27524, 2.24656, -0.858545, 4.18735, 0.819846, -3.43302, 0.793896, 2.29869, 1.3733, -0.989186, -2.66895, -2.69498, -2.75059, -0.316513, 2.92055, 2.15683, 3.23589, 3.96045, -0.395392, -4.30458, 4.23023, -2.10206, 1.7894, 0.402521, 4.02238, 1.7857, 1.19637, 3.48859, -1.19052, 3.0998, -1.77703, -2.83522, -2.14077, -0.856841, -1.99668, 5.88102, 4.98794, -4.54769, -1.24244, 0.00964238"

# neuronStr = "2X3X3X3X3X1"
# str = "1669,2.99655, 5.45868, -0.871209, 2.45073, 1.81667, 6.21747, -3.67208, -1.95684, -1.94578, 3.4826, 2.06384, 2.07905, 5.06989, 0.28875, 0.754481, 0.95933, 2.81964, 2.38933, -1.7991, -3.83407, -3.94271, 5.73188, -0.439558, -2.27671, 2.1846, 2.73404, 3.24917, 2.38703, 2.75653, 3.11856, -3.10315, -2.82318, -1.26783, -2.63199, 5.57446, -3.06424, 3.04046, 3.45285, 3.4489, 3.56043, 1.38017, 3.99581, 0.219994, -3.39757, -0.0944336, -3.16128, 4.8351, -4.39442, -0.271265, 0.00887238"

# neuronStr = "2X4X4X4X4X1"
# str = "569,-1.40349, 4.73401, 4.39454, 0.595671, 4.97564, 0.42259, 0.771733, 4.30004, -1.80419, -2.58622, -2.56936, -2.5129, 1.83581, 3.4392, -0.204556, 0.398763, 0.792568, -1.43016, 2.91771, 2.28341, 0.879131, -1.14803, 2.79282, 2.22344, 2.18047, 3.13294, 0.705359, 1.13135, -2.82744, -1.78581, -3.03655, -2.89323, 1.03061, 1.89421, 2.23595, 2.15343, -2.15692, 0.608627, 3.56931, 3.36424, 4.22728, 2.43007, -0.47886, -0.399374, 3.16718, 2.28146, 0.342999, 0.369826, -3.10989, -2.88342, -2.5328, -2.45013, 2.24708, 5.1517, 3.20658, -3.59481, 3.07095, 1.6612, 3.52622, -0.620736, 2.52098, -0.216395, 2.42076, 4.33917, 2.43201, -0.209252, 2.35339, 4.06447, -2.22535, -3.26955, -2.67393, 0.342861, 4.07401, -5.84408, 5.11776, -5.81011, -0.2846, 0.00981299"
# str = "439,-0.287801, -0.370451, 6.29973, 0.653061, 4.23102, 3.71699, 0.0611724, 3.48873, -2.04225, -1.74314, -3.15629, -2.23772, 1.43904, 1.49788, 0.789733, 2.19032, 1.17484, 1.23724, 0.882246, 1.98111, 2.07095, 1.81887, -5.23016, -1.6156, 1.52207, 1.54486, 0.0823191, 1.76094, -2.96707, -2.88946, 1.40339, -1.80337, 1.79505, 1.7683, 2.27846, -1.325, 1.89539, 1.86622, 2.15057, -1.06869, -0.0734473, -0.0853545, -3.63634, 4.84367, 2.74926, 2.69572, 0.537416, 2.14108, -2.99542, -2.92206, -1.37465, -1.79248, 2.44345, 2.47911, 1.84345, 3.66819, 2.39081, 2.42612, 1.7734, 3.6006, -1.05825, -1.12896, 3.9256, 2.71051, 3.5861, 3.65812, -3.99355, -1.97618, -1.09381, -1.11789, -3.86522, -1.3513, -2.39412, -2.44732, -5.81172, 6.0477, 1.40761, 0.00965746"

neurons = [int(k) for k in neuronStr.split('X')]
# via Excel
b = [float(k) for k in str.split('\t')]
# via Sublime
# b = [float(k) for k in str.split(',')]

weights = []
biases = []
cursor = 1
for i in range(len(neurons) - 1):
    m = []
    for j in range(neurons[i]):
        m.append(b[cursor:cursor + neurons[i + 1]])
        cursor += neurons[i + 1]
    biases.append(np.matrix(b[cursor:cursor + neurons[i + 1]]).transpose())
    cursor += neurons[i + 1]
    weights.append(np.matrix(m).transpose())


def calcOutput(x, y):
    inputs = weights[0] * np.matrix([[x], [y]]) + biases[0]
    for i in range(len(neurons) - 2):
        outputs = sigmoid(inputs)
        inputs = weights[i + 1] * outputs + biases[i + 1]
    outputs = sigmoid(inputs)
    return outputs[0, 0]


def meshgrid_propagation_forMap(layersArray):
    N = 100
    xyRange = 1.0
    # グリッド作成
    x = np.linspace(0, xyRange, N)
    y = np.linspace(0, xyRange, N)
    X, Y = np.meshgrid(x, y)  # グリッド領域を示すマトリックスの構成
    Z = np.array(list(map(lambda x, y: list(map(calcOutput, x, y)), X, Y)))
    plt.pcolor(X, Y, Z, vmin=0., vmax=1.)
    plt.colorbar()
    plt.jet()
    ttl = "%s\nlearning time = %d" % (neuronStr, b[0])
    plt.title(ttl)
    plt.xlabel('Input1', fontsize=15)
    plt.ylabel('Input2', fontsize=15)
    plt.xlim(0, 1.0)
    plt.ylim(0, 1.0)
    plt.legend(fontsize=18)
    plt.tick_params(labelsize=18)
    plt.grid()
    filename = "%s_learning_time_%d" % (neuronStr, b[0])
    # plt.savefig(filename + ".png")
    plt.show()


meshgrid_propagation_forMap(neurons)
