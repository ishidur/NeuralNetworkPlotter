import numpy as np
from matplotlib import cm, gridspec, pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


# Components of network(l=0,1,2,,,)
neuronStr = "2X10X10X10X1"
str = "9999	-0.548551	0.745499	-1.86289	-2.23009	4.38285	4.75887	0.424592	1.06259	-9.06237	0.249268	2.98785	3.61867	-3.90646	-1.56221	-0.918229	4.9342	-3.53092	-0.41496	3.61307	-3.32237	-0.327577	-0.576399	4.18457	2.30805	-0.0473379	-2.12779	0.167981	1.07642	-1.10761	1.80161	1.59418	-1.44191	-2.50248	2.36883	-0.164967	0.274548	1.60135	-0.565352	-0.770184	-0.0439759	1.48993	-0.766196	-0.447313	3.69636	0.536475	0.917764	0.214392	-0.839365	-0.287058	-0.268359	-0.5874	2.13892	2.31474	-2.70712	-0.0943258	-0.588907	-3.58166	-0.798721	3.4332	0.0515126	-1.2657	0.0304955	-0.574851	-2.02641	-0.701416	0.86954	-2.44753	0.634015	2.05888	1.34398	0.216019	2.05473	0.517537	1.07193	1.54262	-1.67735	1.00826	0.911431	-1.80799	-2.73139	2.29869	2.01048	2.19948	6.06212	-0.217328	-0.0836838	0.625589	-0.266239	-0.481315	-0.811376	-0.935949	0.730664	1.61773	-3.24774	0.970661	-1.12729	-0.843792	-0.739039	0.650622	1.09383	-0.505486	-0.25794	0.353187	0.757124	0.0933623	-0.975571	-0.0302196	0.303482	0.452147	-0.193807	-1.38999	-4.60055	-4.86737	-1.71398	-2.97027	3.55068	1.53817	-1.00201	-0.646696	4.77311	-0.125258	2.25404	1.53085	-2.78565	0.329672	-1.17663	-2.28393	-0.680558	1.48224	-1.5431	-0.197356	-0.819199	0.488212	0.256599	0.535511	-0.44916	-0.128291	-0.580543	0.190273	0.819245	-0.312735	1.92305	1.10731	-1.01643	1.44373	0.746582	0.647479	1.23388	1.74552	1.37295	2.19432	0.374423	1.05289	0.919167	1.17577	5.68989	0.494296	1.56593	-0.295842	0.708518	1.05242	0.472231	1.73653	0.787483	-0.177145	5.74536	0.0951795	1.35215	1.16608	-0.640512	-0.438703	6.93529	-0.0507585	0.0798274	2.89412	-2.03232	0.305834	-0.266639	1.38003	1.88783	1.78243	0.844572	0.361708	0.319197	1.65656	1.85783	0.823044	1.60213	0.286331	0.240716	-0.168169	-1.19613	0.345718	1.1213	-0.278457	-4.32104	-0.240507	-0.939258	-0.382661	0.683587	-0.986189	1.12516	0.634206	-3.28001	0.935872	-4.0524	-0.0707085	-1.05257	0.783525	1.85057	0.273666	0.255201	0.260075	-0.228248	-0.181973	0.214278	0.507905	0.626296	-0.410974	0.176834	1.31871	-2.23839	0.325691	3.6667	-0.528629	1.94358	0.533187	0.359147	0.111023	0.219516	1.22785	-5.36505	0.604364	3.71169	-1.42267	-0.622568	2.26085	0.100655	1.77929	1.86866	1.2951	-1.3181	0.81921	-0.328872	1.06968	-1.21789	1.53072	1.10286	1.0289	1.60805	0.842702	-5.1894	-0.101577	3.12275	-1.92128	5.91338	0.200011	-0.0822746	-0.962697	-1.54317	-0.146394	0.115311"

neurons = [int(k) for k in neuronStr.split('X')]
# via Excel
b = [float(k) for k in str.split('\t')]
# via Sublime
# b = [float(k) for k in str.split(',')]

weights = []
biases = []
cursor = 1
for i in range(len(neurons) - 1):
    m = []
    for j in range(neurons[i]):
        m.append(b[cursor:cursor + neurons[i + 1]])
        cursor += neurons[i + 1]
    biases.append(np.matrix(b[cursor:cursor + neurons[i + 1]]).transpose())
    cursor += neurons[i + 1]
    weights.append(np.matrix(m).transpose())


def calcOutput(x, y):
    inputs = weights[0] * np.matrix([[x], [y]]) + biases[0]
    for i in range(len(neurons) - 2):
        outputs = sigmoid(inputs)
        inputs = weights[i + 1] * outputs + biases[i + 1]
    outputs = sigmoid(inputs)
    return outputs[0, 0]


def meshgrid_propagation_forMap():
    N = 100
    xyRange = 1.0
    # グリッド作成
    x = np.linspace(0.0, xyRange, N)
    y = np.linspace(0.0, xyRange, N)
    X, Y = np.meshgrid(x, y)  # グリッド領域を示すマトリックスの構成
    Z = np.array(list(map(lambda x, y: list(map(calcOutput, x, y)), X, Y)))
    plt.pcolor(X, Y, Z, vmin=0., vmax=1.)
    plt.colorbar()
    plt.jet()
    ttl = "%s\nlearning time = %d" % (neuronStr, b[0])
    plt.title(ttl)
    plt.xlabel('Input1', fontsize=15)
    plt.ylabel('Input2', fontsize=15)
    plt.xlim(-0.0, xyRange)
    plt.ylim(-0.0, xyRange)
    plt.legend(fontsize=18)
    plt.tick_params(labelsize=18)
    plt.grid()
    filename = "%s_learning_time_%d" % (neuronStr, b[0])
    # plt.savefig(filename + ".png")
    plt.show()


meshgrid_propagation_forMap()
